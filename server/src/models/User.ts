import { hashSync } from 'bcrypt';
import mongoose, { Document, Schema } from 'mongoose';
import { makeReadableToken } from '../utils/helpers';

// Define interface for User document
export interface IUser extends Document {
    id: string; // Virtual property
    createdAt: Date; // Generated by Mongoose
    updatedAt: Date; // Generated by Mongoose

    isGuest: boolean;
    username: string;
    password: string;
    email: string;
    isEmailVerified: boolean;
    verifyEmailToken: string;
    resetPasswordToken: string;
    resetPasswordExpires: Date;
    profilePicture: string;

    games: string[]; // Array of game IDs this user is playing
}

// Define schema for User model
const userSchema = new Schema(
    {
        isGuest: { type: Boolean, default: true },
        username: { type: String, required: true },
        password: { type: String, required: false },
        email: { type: String, required: false, unique: false },
        isEmailVerified: { type: Boolean, default: false },
        verifyEmailToken: { type: String, default: null },
        resetPasswordToken: { type: String, default: null },
        resetPasswordExpires: { type: Date, default: null },
        profilePicture: { type: String, default: null }
    },
    {
        timestamps: true,
        toJSON: { virtuals: true },
        toObject: { virtuals: true }
    }
);

// Define virtual properties for User model
userSchema.virtual('id').get(function (this: IUser) {
    return (this._id as unknown as string).toString();
});

// Helper function to create a default guest user object
export async function makeGuestUser(): Promise<IUser> {
    const username = await getNextAvailableGuestUsername();

    const data = {
        isGuest: true,
        username,
        password: hashSync(makeReadableToken(), 10),
        isEmailVerified: false,
        verifyEmailToken: makeReadableToken(),
        profilePicture: 'anon'
    }

    const guestUser = await User.create(data);
    return guestUser;
}

async function getNextAvailableGuestUsername(): Promise<string> {
    let username;
    let isUsernameTaken = true;
    while (isUsernameTaken) {
        username = 'Guest_' + (1000 + Math.floor(Math.random() * 8999));
        isUsernameTaken = !!(await User.findOne({ username }));
        if (isUsernameTaken) console.log('Checking username:', username, isUsernameTaken);
    }

    return username!;
}

// Create and export User model
const User = mongoose.model<IUser>('User', userSchema);
export default User;

export function makeUserPreview(user: IUser) {
    return {
        id: user.id,
        username: user.username,
        isGuest: user.isGuest,
        profilePicture: user.profilePicture
    };
}